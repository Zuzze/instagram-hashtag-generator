[{"/Users/zuzze/Desktop/Coding/react-native/instagram-hashtag-generator/src/App.tsx":"1","/Users/zuzze/Desktop/Coding/react-native/instagram-hashtag-generator/src/components/ThreeScene.jsx":"2","/Users/zuzze/Desktop/Coding/react-native/instagram-hashtag-generator/src/hashtags.ts":"3"},{"size":3969,"mtime":1610143894551,"results":"4","hashOfConfig":"5"},{"size":4205,"mtime":1610045083736,"results":"6","hashOfConfig":"5"},{"size":3627,"mtime":1610143734704,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"18epifh",{"filePath":"11","messages":"12","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zuzze/Desktop/Coding/react-native/instagram-hashtag-generator/src/App.tsx",["16","17"],"import React, { useState, useEffect } from \"react\";\nimport logo from \"./hashtag.png\";\nimport \"./App.css\";\nimport ThreeScene from \"./components/ThreeScene.jsx\";\nimport { HASHTAGS, USERS } from \"./hashtags\";\n\nconst NUMBER_OF_HASHTAGS = 30;\n\nconst FILTERS: Array<string> = [\n  \"design\",\n  \"web\",\n  \"app\",\n  \"illustration\",\n  \"logo\",\n  \"flat\",\n  \"3d\"\n];\n\nconst App: React.FC = () => {\n  const [selectedFilters, setSelectedFilters] = useState<Array<string>>([]);\n  const [text, setText] = useState<string>(\"\");\n  const [tagPool, setTagPool] = useState<Array<string>>([]);\n  const [userPool, setUserPool] = useState<Array<string>>([]);\n  const [numberOfTaggedUsers, setNumberOfTaggedUsers] = useState<number>(10);\n\n  function generateHashtags(filters: Array<string>): void {\n    console.log(\"generating\", filters);\n    let newText: string = \"\";\n    let tags: Array<string> = [];\n    let users: Array<string> = [];\n\n    for (let filter of filters) {\n      tags = tags.concat(HASHTAGS[filter]);\n      users = tags.concat(USERS[filter]);\n    }\n    console.log(\"all\", tags);\n    console.log(\"user\", users);\n    setText(newText);\n    setTagPool(tags);\n    setUserPool(users);\n    generateRandom(tags, users);\n  }\n\n  function generateRandom(hashtags: Array<string>, users: Array<string>) {\n    const generatedTags: Array<string> = [];\n    // hashtags\n    while (\n      generatedTags.length < NUMBER_OF_HASHTAGS &&\n      generatedTags.length < hashtags.length\n    ) {\n      const randomIndex = Math.floor(Math.random() * hashtags.length) + 1;\n      if (generatedTags.indexOf(hashtags[randomIndex]) === -1) {\n        generatedTags.push(hashtags[randomIndex]);\n      }\n    }\n\n    const generatedUsers: Array<string> = [];\n    // users\n    while (\n      generatedUsers.length < numberOfTaggedUsers &&\n      generatedUsers.length < users.length\n    ) {\n      const randomIndex = Math.floor(Math.random() * users.length) + 1;\n      if (generatedUsers.indexOf(users[randomIndex]) === -1) {\n        generatedUsers.push(users[randomIndex]);\n      }\n    }\n    console.log(generatedTags);\n    setText(generatedTags.join(\" \") + \" \" + generatedUsers.join(\" \"));\n  }\n\n  function updateFilters(filter: string): void {\n    let updatedFilters: Array<string> = selectedFilters;\n    if (selectedFilters.indexOf(filter) > -1) {\n      updatedFilters = updatedFilters.filter(f => f !== filter);\n    } else {\n      updatedFilters.push(filter);\n    }\n    setSelectedFilters(updatedFilters);\n    generateHashtags(updatedFilters);\n    console.log(\"filters\", updatedFilters);\n  }\n\n  return (\n    <div className=\"App\">\n      <ThreeScene />\n      <header className=\"App-header\">\n        <div>\n          {FILTERS.map(filter => (\n            <span key={filter} style={{ marginRight: \"20px\" }}>\n              <input\n                id={filter}\n                name={filter}\n                type=\"checkbox\"\n                onChange={() => updateFilters(filter)}\n              />\n              <label>{filter}</label>\n            </span>\n          ))}\n        </div>\n        <br />\n        <div>\n          <label>Number of tagged users</label>\n          <br />\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"30\"\n            step=\"15\"\n            list=\"steplist\"\n            onChange={e => setNumberOfTaggedUsers(Number(e.target.value))}\n          />\n          <datalist id=\"steplist\">\n            <option>0</option>\n            <option>5</option>\n            <option>10</option>\n            <option>15</option>\n            <option>20</option>\n            <option>25</option>\n            <option>30</option>\n          </datalist>\n        </div>\n        <br />\n        <div>\n          <p>\n            Your random generator pool has {tagPool.length} hashtags and{\" \"}\n            {userPool.length} accounts to tag\n          </p>\n        </div>\n        <p>Your description</p>\n        <textarea value={text} />\n      </header>\n      <main></main>\n    </div>\n  );\n};\n\nexport default App;\n","/Users/zuzze/Desktop/Coding/react-native/instagram-hashtag-generator/src/components/ThreeScene.jsx",["18","19","20","21","22"],"import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { MTLLoader, OBJLoader } from \"three-obj-mtl-loader\";\nimport OrbitControls from \"three-orbitcontrols\";\n\nconst _BACKGROUND = \"#472a82\";\nconst _FOV_FRUSTUM = 75;\nconst _NEAR_FRUSTUM = 0.1; // plane closer to the\n\nclass ThreeScene extends Component {\n  componentDidMount() {\n    // Create scene\n    const width = this.sceneRef.clientWidth;\n    const height = this.sceneRef.clientHeight;\n    this.scene = new THREE.Scene();\n\n    // Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor(_BACKGROUND);\n    this.renderer.setSize(width, height);\n    this.sceneRef.appendChild(this.renderer.domElement);\n\n    // Add Camera\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 10;\n    this.camera.position.y = 2;\n\n    // Camera Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    // Lights\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n\n    // Add models to scene\n    this.addModels();\n\n    // Render Scene\n    this.renderScene();\n\n    // Start animation\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    const geometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#0F0\"\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n\n    // -----Step 2--------\n    //LOAD TEXTURE and on completion apply it on SPHERE\n    new THREE.TextureLoader().load(\n      \"https://images.pexels.com/photos/1089438/pexels-photo-1089438.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n      texture => {\n        //Update Texture\n        this.cube.material.map = texture;\n        this.cube.material.needsUpdate = true;\n      },\n      xhr => {\n        //Download Progress\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      },\n      error => {\n        //Error CallBack\n        console.log(\"An error happened\" + error);\n      }\n    );\n\n    // -----Step 4--------\n    //Loading 3d Models\n    //Loading Material First\n    /*var mtlLoader = new MTLLoader();\n    mtlLoader.setBaseUrl(\"./assets/\");\n    mtlLoader.load(\"freedom.mtl\", materials => {\n      materials.preload();\n      console.log(\"Material loaded\");\n      //Load Object Now and Set Material\n      var objLoader = new OBJLoader();\n      objLoader.setMaterials(materials);\n      objLoader.load(\n        \"./assets/freedom.obj\",\n        object => {\n          this.freedomMesh = object;\n          this.freedomMesh.position.setY(3); //or  this\n          this.freedomMesh.scale.set(0.02, 0.02, 0.02);\n          this.scene.add(this.freedomMesh);\n        },\n        xhr => {\n          console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n        },\n        // called when loading has errors\n        error => {\n          console.log(\"An error happened\" + error);\n        }\n      );\n    });*/\n  }\n\n  componentWillUnsceneRef() {\n    this.stop();\n    this.sceneRef.removeChild(this.renderer.domElement);\n  }\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n  animate = () => {\n    // -----Step 3--------\n    //Rotate Models\n    if (this.cube) this.cube.rotation.y += 0.01;\n    if (this.freedomMesh) this.freedomMesh.rotation.y += 0.01;\n\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n  renderScene = () => {\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: \"100vw\", height: \"50vh\" }}\n        ref={sceneRef => {\n          this.sceneRef = sceneRef;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeScene;\n","/Users/zuzze/Desktop/Coding/react-native/instagram-hashtag-generator/src/hashtags.ts",[],{"ruleId":"23","severity":1,"message":"24","line":1,"column":27,"nodeType":"25","messageId":"26","endLine":1,"endColumn":36},{"ruleId":"23","severity":1,"message":"27","line":2,"column":8,"nodeType":"25","messageId":"26","endLine":2,"endColumn":12},{"ruleId":"28","severity":1,"message":"29","line":3,"column":10,"nodeType":"25","messageId":"26","endLine":3,"endColumn":19},{"ruleId":"28","severity":1,"message":"30","line":3,"column":21,"nodeType":"25","messageId":"26","endLine":3,"endColumn":30},{"ruleId":"28","severity":1,"message":"31","line":7,"column":7,"nodeType":"25","messageId":"26","endLine":7,"endColumn":19},{"ruleId":"28","severity":1,"message":"32","line":8,"column":7,"nodeType":"25","messageId":"26","endLine":8,"endColumn":20},{"ruleId":"28","severity":1,"message":"33","line":29,"column":11,"nodeType":"25","messageId":"26","endLine":29,"endColumn":19},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","no-unused-vars","'MTLLoader' is defined but never used.","'OBJLoader' is defined but never used.","'_FOV_FRUSTUM' is assigned a value but never used.","'_NEAR_FRUSTUM' is assigned a value but never used.","'controls' is assigned a value but never used."]